// Translation document for the collection
// =======================================
// This file contains the texts
// annotated for translation
//
// Instructions:
// 1. Open the PO file with Poedit
// 2. Press "Update" to update from sources

gettext('Heart-Sys');
gettext('Heart-Sys-Zero');
gettext('Simplified');
gettext('Sysclk_div');
gettext('Verilog');
gettext('Heart-Sys-N-32bits');
gettext('Heart-sys-N-32bits: Generate N periods. Signal with  period T cycles');
gettext('1-to-2 DeMultiplexer (1-bit channels) (Flipped version)');
gettext('1-to-2 DeMultplexer (1-bit channels)');
gettext('Two bits input And gate');
gettext('NOT gate (Verilog implementation)');
gettext('OR2: Two bits input OR gate');
gettext('Constant bit 0');
gettext('Sys-Delay-xN-32bits: The input tic is delayed N cycles');
gettext('Counter-M-x32: 32-bits M module counter with reset');
gettext('Inc1-32bit: Increment a 32-bits number by one');
gettext('AdderK-32bit: Adder of 32-bit operand and 32-bit constant');
gettext('Generic: 32-bits generic constant');
gettext('Adder-32bits: Adder of two operands of 32 bits');
gettext('Adder-8bits: Adder of two operands of 8 bits');
gettext('Bus8-Split-half: Split the 8-bits bus into two buses of the same size');
gettext('Adder-4bits: Adder of two operands of 4 bits');
gettext('Adder-1bit: Adder of two operands of 1 bit');
gettext('AdderC-1bit: Adder of two operands of 1 bit plus the carry in');
gettext('XOR gate: two bits input xor gate');
gettext('Bus4-Split-all: Split the 4-bits bus into its wires');
gettext('Bus4-Join-all: Join all the wires into a 4-bits Bus');
gettext('Bus8-Join-half: Join the two same halves into an 8-bits Bus');
gettext('AdderC-4bits: Adder of two operands of 4 bits and Carry in');
gettext('AdderC-8bits: Adder of two operands of 8 bits and Carry in');
gettext('Bus16-Join-half: Join the two same halves into an 16-bits Bus');
gettext('Bus24-Join-8-16: Join the two buses into an 24-bits Bus');
gettext('Bus32-Split-8-24: Split the 28-bits bus into two buses of 8 and 24 wires');
gettext('Bus24-Split-16-8: Split the 24-bits bus into two buses of 16 and 8 wires');
gettext('Bus16-Split-half: Split the 16-bits bus into two buses of the same size');
gettext('Bus32-Join-8-24: Join the two buses into an 32-bits Bus');
gettext('Geu-32-Bits_v: 32-bit Unsigned Greather than or equal comparator. Verilog implementation');
gettext('32-Reg-rst: 32 bits Register with reset. Verilog implementation');
gettext('RS-FF-set-verilog. RS Flip-flop with priority set. Implementation in verilog');
gettext('Counter-Max-x32: 32-bits  counter with reset and max value');
gettext('Periodo (in system clock cycles)');
gettext('Current cycle in the period  \n(0-T-1)');
gettext('Contador de periodos');
gettext('Se ha alcanzado el último  \nperiodo?');
gettext('Si --> Terminar');
gettext('No --> Repetir');
gettext('Delay');
gettext('Input');
gettext('Output');
gettext('System clock');
gettext('Input signal');
gettext('Cycles to delay');
gettext('Delay finished!');
gettext('Machine state: ON/OFF');
gettext('RS Flip-Flop');
gettext('Circuit state:  \n* ON: working (1)\n* OFF: Not working (0)');
gettext('The counter has reached  \nthe number of cycles  \nto delay');
gettext('Maximum count  \nreached');
gettext('32-bits register');
gettext('If the max count is reached  \nand the cnt tic is received,  \nthe register is reset to 0');
gettext('External reset');
gettext('Heart-Sys-start-stop-32bits');
gettext('Heart-sys-start-stop-32bits: Generate a periodic signal of period T cycles');
gettext('Petición de stop');
gettext('Hay que parar el generador, bien  \nporque acaba de llegar una petición AHORA  \no bien porque había llegado antes');
gettext('Resetear la petición de stop  \ncuando el generador haya terminado');
gettext('Siguiente periodo');
gettext('Emitir un nuevo period en el comienzo  \no si no ha llegado la señal de stop');
gettext('El tic del último periodo se lleva  \nal start del delay o bien se usa  \npara indicar que ha terminado');
gettext('Heart-Sys-Zero-32bits');
gettext('Heart-sys-zero-32bits: Generate a periodic signal of period T cycles. It starts at cycle 0. It never stops');
gettext('start: Start signal: It goes from 1 to 0 when the system clock starts. 1 cycle pulse witch. Block implementation');
gettext('System - D Flip-flop. Capture data every system clock cycle. Verilog implementation');
gettext('Start a new period');
gettext('Start at cycle 0!');
gettext('Repeat!');
gettext('Current period ended  \nStart a new one');
gettext('Initial value: 1');
gettext('Initial value: 0');
gettext('Falling edge');
gettext('Parameter: Initial value');
gettext('Input data');
gettext('# D Flip-Flop  (system)\n\nIt stores the input data that arrives at cycle n  \nIts output is shown in the cycle n+1');
gettext('Not connected');
gettext('Heart-Sys-Zero-rst-32bits');
gettext('Heart-sys-zero-rst-32bits: Generate a periodic signal of period T cycles. It starts at cycle 0. It never stops');
gettext('Vuelta al estado inicial');
gettext('Estado del generador');
gettext('Valor máximo alcanzado');
gettext('Reset externo  \ndel generador');
gettext('El contador ha alcanzado  \nel número maximo de ciclos  \na retrasar');
gettext('32-bits');
gettext('Heart-HZ');
gettext('Simplified-Heart-Hz-sys-32bits: periodic signal in Hertz. Duty cicle of 50 percent');
gettext('SR1-32bits: Shift  a 32-bit value one bit right. MSB is filled with the input  in');
gettext('Bus32-Split-31-1: Split the 32-bits bus into two buses of 31 and 1 wires');
gettext('Bus32-Join-1-31: Join the two buses into an 32-bits Bus');
gettext('Unit-hz-32bits: hz to cycles converter');
gettext('TFF-verilog. System TFF with toggle input: It toogles on every system cycle if the input is active. Verilog implementation');
gettext('Dividir entre dos el periodo  \n(Multiplicar por 2 la frecuencia)  ');
gettext('Input parameter: Milieconds  ');
gettext('Input parameter:  \nSystem Frequency');
gettext('Heart-KHZ');
gettext('Simplified-Heart-KHz-sys-32bits: periodic signal in Kilo-Hertz. 50% of duty cycle');
gettext('Unit-khz-32bits: khz to cycles converter');
gettext('Heart-ms');
gettext('Simplified-Heart-ms-sys-32bits: Nominal periodic signal in mili seconds');
gettext('Unit-ms-32bits: ms to cycles converter');
gettext('Heart-sec');
gettext('Simplified-Heart-Sec-sys-32bits: periodic signal in Seconds. 50% of duty cycle');
gettext('Unit-s-32bits: seconds to cycles converter');
gettext('Heart-tic-HZ');
gettext('Simplified-Heart-tic-hz-sys-32bits: Nominal periodic signal in hz');
gettext('Heart-tic-Sec');
gettext('Simplified-Heart-tic-sec-sys-32bits: Nominal periodic signal in seconds');
gettext('Heart-tic-ms');
gettext('Simplified-Heart-tic-ms-sys-32bits: Nominal periodic signal in mili seconds');
gettext('02-bits');
gettext('03-bits');
gettext('04-bits');
gettext('05-bits');
gettext('06-bits');
gettext('07-bits');
gettext('08-bits');
gettext('12-bits');
gettext('16-bits');
gettext('20-bits');
gettext('24-bits');
gettext('28-bits');
gettext('32-bits');
gettext('Sysclk_div16');
gettext('sysclk_div16: Generate a signal from the division of the system clock by 16');
gettext('4-bits Syscounter');
gettext('Inc1-4bit: Increment a 4-bits number by one');
gettext('AdderK-4bit: Adder of 4-bit operand and 4-bit constant');
gettext('Generic: 4-bits generic constant (0-15)');
gettext('04-Sys-reg: 4 bits system register. Verilog implementation');
gettext('Sysclk_div2');
gettext('sysclk_div: Generate a signal from the division of the system clock by 2');
gettext('Sys-TFF: System TFF: It toogles its output on every system cycle. Verilog implementation');
gettext('Sysclk_div3');
gettext('sysclk_div3: Generate a signal from the division of the system clock by 3');
gettext('Comp1-x02: Comparator of 2-bits operand and parameter');
gettext('Comp2-2bit: Comparator of two 2-bit numbers');
gettext('Bus2-Split-all: Split the 2-bits bus into two wires');
gettext('Comp2-1bit: Comparator of two 1-bit numbers');
gettext('Generic: 2-bits generic constant (0,1,2,3)');
gettext('2-bits Syscounter with reset');
gettext('Inc1-2bit: Increment a 2-bits number by one');
gettext('AdderK-2bit: Adder of 2-bit operand and 2-bit constant');
gettext('Adder-2bits: Adder of two operands of 2 bits');
gettext('Bus2-Join-all: Joint two wires into a 2-bits Bus');
gettext('02-Sys-reg-rst: 2 bits system register with reset. Verilog implementation');
gettext('A');
gettext('B');
gettext('Sysclk_div32');
gettext('sysclk_div32: Generate a signal from the division of the system clock by 32');
gettext('5-bits Syscounter');
gettext('Inc1-5bit: Increment a 5-bits number by one');
gettext('AdderK-5bit: Adder of 5-bit operand and 5-bit constant');
gettext('Adder-5bits: Adder of two operands of 5 bits');
gettext('Bus5-Split-1-4: Split the 5-bits bus into two buses of 1 and 4 bits');
gettext('Bus5-Join-1-4: Join the two buses of 1 and 4 bits into a 5-bits Bus');
gettext('Generic: 5-bits generic constant (0-31)');
gettext('05-Sys-reg: 5 bits system register. Verilog implementation');
gettext('Sysclk_div4');
gettext('sysclk_div4: Generate a signal from the division of the system clock by 4');
gettext('2-bits Syscounter');
gettext('02-Sys-reg: 2 bits system register. Verilog implementation');
gettext('Sysclk_div64');
gettext('sysclk_div64: Generate a signal from the division of the system clock by 64');
gettext('6-bits Syscounter with reset');
gettext('Inc1-6bit: Increment a 6-bits number by one');
gettext('AdderK-6bit: Adder of 6-bit operand and 6-bit constant');
gettext('Adder-6bits: Adder of two operands of 6 bits');
gettext('Bus6-Split-2-4: Split the 6-bits bus into two buses of 2 and 4 wires');
gettext('Bus6-Join-1-5: Join the two buses into a 6-bits Bus');
gettext('Generic: 6-bits generic constant (0-63)');
gettext('06-Sys-reg-rst: 6 bits system register with reset. Verilog implementation');
gettext('Sysclk_div8');
gettext('sysclk_div8: Generate a signal from the division of the system clock by 8');
gettext('3-bits Syscounter');
gettext('Inc1-3bit: Increment a 3-bits number by one');
gettext('AdderK-3bit: Adder of 3-bit operand and 3-bit constant');
gettext('Generic: 3-bits generic constant (0-7)');
gettext('Adder-3bits: Adder of two operands of 3 bits');
gettext('Bus3-Split-all: Split the 3-bits bus into three wires');
gettext('Bus3-Join-all: Joint three wires into a 3-bits Bus');
gettext('03-Sys-reg: 3 bits system register. Verilog implementation');
gettext('Sysclk_divN');
gettext('sysclk_divN_2bits: Generate a signal from the division of the system clock by N. (2-bits precision) (N = 2,3,4)');
gettext('Generic: 2-bits k-1 constant (Input values: 1,2,3,4). It returns the value input by the user minus 1. Outputs: 0,1,2,3');
gettext('Output: 0,1,2,3');
gettext('Inputs: 1,2,3,4');
gettext('Sysclk_divN_var');
gettext('sysclk_divN_var_2bits: Generate a signal from the division of the system clock by N. (2-bits precision) (N = 1,2,3, divisions by 2, 3 and 4 respectivelly)');
gettext('Values for N\n\n| Value | Division by |\n|-------|-------------|\n| 0     |  No div. Signal to 1  |\n| 1     |    2        |\n| 2     |    3        |\n| 3     |    4        |');
gettext('Sysclk_divN');
gettext('sysclk_divN_3bits: Generate a signal from the division of the system clock by N. (3-bits precision) (N = 2,3,4,..,8)');
gettext('Generic: 3-bits k-1 constant (Input values: 1,2,...,8). It returns the value input by the user minus 1. Outputs: 0,1,2,...,7');
gettext('Comp2-3bit: Comparator of two 3-bit numbers');
gettext('Three bits input And gate');
gettext('3-bits Syscounter with reset');
gettext('03-Sys-reg-rst: 3 bits system register with reset. Verilog implementation');
gettext('Output: 0,1,2,...,7');
gettext('Inputs: 1,2,...,8');
gettext('Sysclk_divN');
gettext('sysclk_divN_4bits: Generate a signal from the division of the system clock by N. (4-bits precision) (N = 2,3,4,..,16)');
gettext('Generic: 4-bits k-1 constant (Input values: 1,2,...,16). It returns the value input by the user minus 1. Outputs: 0,1,2,...,15');
gettext('Comp2-4bit: Comparator of two 4-bit numbers');
gettext('4-bits Syscounter with reset');
gettext('04-Sys-reg-rst: 4 bits system register with reset. Verilog implementation');
gettext('Output: 0,1,2,...,15');
gettext('Inputs: 1,2,...,16');
gettext('Sysclk_divN');
gettext('sysclk_divN_5bits: Generate a signal from the division of the system clock by N. (5-bits precision) (N = 2,3,4,..,32)');
gettext('Generic: 5-bits k-1 constant (Input values: 1,2,...,32). It returns the value input by the user minus 1. Outputs: 0,1,2,...,31');
gettext('Comp2-5bit: Comparator of two 5-bit numbers');
gettext('5-bits Syscounter with reset');
gettext('05-Sys-reg-rst: 5 bits system register with reset. Verilog implementation');
gettext('Output: 0,1,2,...,31');
gettext('Inputs: 1,2,...,32');
gettext('Sysclk_divN');
gettext('sysclk_divN_6bits: Generate a signal from the division of the system clock by N. (6-bits precision) (N = 2,3,4,..,64)');
gettext('Generic: 6-bits k-1 constant (Input values: 1,2,...,64). It returns the value input by the user minus 1. Outputs: 0,1,2,...,63');
gettext('Comp2-6bit: Comparator of two 6-bit numbers');
gettext('Output: 0,1,2,...,63');
gettext('Inputs: 1,2,...,64');
gettext('Sysclk_divN');
gettext('sysclk_divN_7bits: Generate a signal from the division of the system clock by N. (7-bits precision) (N = 2,3,4,..,128)');
gettext('Generic: 7-bits k-1 constant (Input values: 1,2,...,128). It returns the value input by the user minus 1. Outputs: 0,1,2,...,127');
gettext('Comp2-7bit: Comparator of two 7-bit numbers');
gettext('Bus7-Split-3-4: Split the 7-bits bus into two buses of 3 and 4 wires');
gettext('7-bits Syscounter with reset');
gettext('Inc1-7bit: Increment a 7-bits number by one');
gettext('AdderK-7bit: Adder of 7-bit operand and 7-bit constant');
gettext('Adder-7bits: Adder of two operands of 7 bits');
gettext('Bus7-Join-1-4: Join the two buses into a 7-bits Bus');
gettext('Generic: 7-bits generic constant (0-127)');
gettext('07-Sys-reg-rst: 7 bits system register with reset. Verilog implementation');
gettext('Output: 0,1,2,...,127');
gettext('Inputs: 1,2,...,128');
gettext('Sysclk_divN');
gettext('sysclk_divN_8bits: Generate a signal from the division of the system clock by N. (8-bits precision) (N = 2,3,4,..,256)');
gettext('Generic: 8-bits k-1 constant (Input values: 1,2,...,256). It returns the value input by the user minus 1. Outputs: 0,1,2,...,255');
gettext('Comp2-8bit: Comparator of two 8-bit numbers');
gettext('8-bits Syscounter with reset');
gettext('Inc1-8bit: Increment a 8-bits number by one');
gettext('AdderK-8bit: Adder of 8-bit operand and 8-bit constant');
gettext('Generic: 8-bits generic constant (0-255)');
gettext('08-Sys-reg-rst: 8 bits system register with reset. Verilog implementation');
gettext('Output: 0,1,2,...,255');
gettext('Inputs: 1,2,...,256');
gettext('Sysclk_divN');
gettext('sysclk_divN_12bits: Generate a signal from the division of the system clock by N. (12-bits precision) (N = 2,3,4,..,0x1000))');
gettext('Generic: 12-bits k-1 constant (Input values: 1,2,...,4096). It returns the value input by the user minus 1. Outputs: 0,1,2,...,4095');
gettext('Comp2-12bit: Comparator of two 12-bit numbers');
gettext('Bus12-Split-4-8: Split the 12-bits bus into two buses of 4 and 8 wires');
gettext('12-bits Syscounter with reset');
gettext('Inc1-12bit: Increment a 12-bits number by one');
gettext('AdderK-12bit: Adder of 12-bit operand and 12-bit constant');
gettext('Adder-12bits: Adder of two operands of 12 bits');
gettext('Bus12-Join-4-8: Join the two buses into an 12-bits Bus');
gettext('Generic: 12-bits generic constant (0-4095)');
gettext('12-Sys-reg-rst: 12 bits system register with reset. Verilog implementation');
gettext('Output: 0,1,2,...,4095');
gettext('Inputs: 1,2,...,4096');
gettext('Sysclk_divN');
gettext('Generic: 16-bits k-1 constant (Input values: 1,2,...,h10000). It returns the value input by the user minus 1. Outputs: 0,1,2,...,FFFF');
gettext('Comp2-16bit: Comparator of two 16-bit numbers');
gettext('16-bits Syscounter with reset');
gettext('Inc1-16bit: Increment a 16-bits number by one');
gettext('AdderK-16bit: Adder of 16-bit operand and 16-bit constant');
gettext('Generic: 16-bits generic constant');
gettext('Adder-16bits: Adder of two operands of 16 bits');
gettext('16-Sys-reg-rst: 16 bits system register with reset. Verilog implementation');
gettext('Output: 0,1,2,...,hffff');
gettext('Inputs: 1,2,...,h10000');
gettext('Sysclk_divN');
gettext('sysclk_divN_20bits: Generate a signal from the division of the system clock by N. (20-bits precision) (N = 2,3,4,..,0x100000))');
gettext('Generic: 20-bits generic constant');
gettext('Generic: 20-bits k-1 constant (Input values: 1,2,...,h100000). It returns the value input by the user minus 1. Outputs: 0,1,2,...,FFFFF');
gettext('Comp2-20bit: Comparator of two 20-bit numbers');
gettext('Bus20-Split-4-8-8: Split the 20-bits bus into three buses of 4, 8 and 8 wires');
gettext('20-bits Syscounter with reset');
gettext('Inc1-20bit: Increment a 20-bits number by one');
gettext('Adder-20bits: Adder of two operands of 20 bits');
gettext('Bus20-Split-8-12: Split the 20-bits bus into two buses of 8 and 12 wires');
gettext('Bus20-Join-half: Join the two buses into an 20-bits Bus');
gettext('20-Sys-reg-rst: 20 bits system register with reset. Verilog implementation');
gettext('Output: 0,1,2,...,hfffff');
gettext('Inputs: 1,2,...,h100000');
gettext('Sysclk_divN');
gettext('sysclk_divN_24bits: Generate a signal from the division of the system clock by N. (24-bits precision) (N = 2,3,4,..,0x1000000))');
gettext('Generic: 24-bits k-1 constant (Input values: 1,2,...,h1000000). It returns the value input by the user minus 1. Outputs: 0,1,2,...,FFFFFF');
gettext('Comp2-24bit: Comparator of two 24-bit numbers');
gettext('Bus24-Split-one-third: Split the 24-bits bus into three buses of  the same size');
gettext('24-bits Syscounter with reset');
gettext('Inc1-24bit: Increment a 24-bits number by one');
gettext('AdderK-24bit: Adder of 24-bit operand and 24-bit constant');
gettext('Generic: 24-bits generic constant');
gettext('Adder-24bits: Adder of two operands of 24 bits');
gettext('24-Sys-reg-rst: 24 bits system register with reset. Verilog implementation');
gettext('Output: 0,1,2,...,hffffff');
gettext('Inputs: 1,2,...,h1000000');
gettext('Sysclk_divN');
gettext('sysclk_divN_28bits: Generate a signal from the division of the system clock by N. (28-bits precision) (N = 2,3,4,..,0x10000000))');
gettext('Bus28-Split-4-8-8-8: Split the 28-bits bus into four buses of 4, 8, 8, and 8 wires');
gettext('Generic: 28-bits k-1 constant (Input values: 1,2,...,h10000000). It returns the value input by the user minus 1. Outputs: 0,1,2,...,FFFFFFF');
gettext('28-bits Syscounter with reset');
gettext('Inc1-28bit: Increment a 28-bits number by one');
gettext('Generic: 28-bits generic constant');
gettext('Adder-28bits: Adder of two operands of 28 bits');
gettext('Bus28-Split-20-8: Split the 28-bits bus into two buses of 20 and 8 wires');
gettext('Bus28-Join-4-24: Join the two buses into an 28-bits Bus');
gettext('28-Sys-reg-rst: 28 bits system register with reset. Verilog implementation');
gettext('Sysclk_divN');
gettext('sysclk_divN_32bits: Generate a signal from the division of the system clock by N. (32-bits precision) (N = 2,3,4,..,0x100000000))');
gettext('Generic: 32-bits k-1 constant (Input values: 1,2,...,h100000000). It returns the value input by the user minus 1. Outputs: 0,1,2,...,FFFFFFFF');
gettext('Comp2-32bit: Comparator of two 32-bit numbers');
gettext('Bus32-Split-quarter: Split the 32-bits bus into four buses of 8 wires');
gettext('32-bits Syscounter with reset');
gettext('32-Sys-reg-rst: 32 bits system register with reset. Verilog implementation');
gettext('Fijos');
gettext('Tics');
gettext('Corazon_Hz');
gettext('Corazon genérico para bombear bits a la frecuencia fijada en Hz (por defecto 1Hz)');
gettext('Corazon_Seg');
gettext('Bombear 1 bit con el periodo especificado en el parámetro. Por defecto el periodo es de 1 segundos');
gettext('Corazon_ms');
gettext('Bombear 1 bit con el periodo especificado en el parámetro (en ms). Por defecto el periodo es de 100 ms');
gettext('Corazon_DO4');
gettext('Bombear bits a la frecuencia del DO de la cuarta octava');
gettext('Creado a partir de un **corazón  \ngenérico**, dando el valor adecuado  \na su parámetro frecuencia');
gettext('Corazon_MI4');
gettext('Bombear bits a la frecuencia del MI de la cuarta octava');
gettext('Corazon_RE4');
gettext('Bombear bits a la frecuencia del RE de la cuarta octava');
gettext('Heart-Hz');
gettext('Corazón de bombeo de tics a un frecuencia parametrica en Hz');
gettext('Heart-Sec-ena');
gettext('Corazón de bombeo de tics con periodo paramétrico de segundos y entrada de enable');
gettext('Heart-Sec');
gettext('Corazón de bombeo de tics a con periodo paramétrico de segundos');
gettext('Heart-baud-rx');
gettext('Corazon de tics para generar velocidades de recepción serie en baudios. La velocidad por defecto es 115200');
gettext('Heart-baud');
gettext('Corazón de tics para generar las velocidades de transmisión serie en baudios (Por defecto emite tics a 11500 baudios)');
gettext('Heart-ms-ena');
gettext('Corazón de bombeo de tics con periodo paramétrico de milisegundos y entrada de enable');
gettext('Heart-ms-rst');
gettext('Corazón de bombeo de tics a con periodo paramétrico de milisegundos, con reset');
gettext('Puerta OR');
gettext('Timer in ms, with stop input');
gettext('Puerta NOT');
gettext('Máquina de contar, de 1 bit, con entrada de Stop');
gettext('Puerta AND');
gettext('Biestable de almacenamiento del estado de la máquina');
gettext('Rising-edge detector. It generates a 1-period pulse (tic) when a rising edge is detected on the input. Block implementation');
gettext('Falling-edge detector. It generates a 1-period pulse (tic) when a falling edge is detected on the input');
gettext('TFF-rst-verilog: TFF with toggle input and reset: It toogles on every system cycle if the input is active. Verilog implementation');
gettext('Semiperiod');
gettext('**Arranque del**  \n**temporizador**');
gettext('**Salida de pulso**');
gettext('**Salida de tic**');
gettext('**Parametro del timer**  \nmilisegundos a esperar');
gettext('**Reloj del sistema**');
gettext('**Estado de**  \n**la máquina**');
gettext('Máquina encendida');
gettext('Máquina apagada  \n(rst = 1)');
gettext('Tic de arranque');
gettext('Tic de fin');
gettext('**Contador de ciclos**');
gettext('Número de ciclos  \ncontados');
gettext('### Salidas');
gettext('Estado de la máquina');
gettext('Ciclo actual');
gettext('Cuenta finalizada');
gettext('Ejecutar el ciclo');
gettext('¿Estamos en el  \nciclo 1?');
gettext('Solo se hace caso a la  \nentrada next si la  \nmáquina está encendida');
gettext('Nuevo ciclo');
gettext('Si es el ciclo 1 y  \nse pide un ciclo  \nnuevo: Terminar');
gettext('Apagar la  \nmáquina');
gettext('Ciclo nuevo:  \nincrementar la cuenta');
gettext('El tic de start se saca  \npor exec para que se ejecute  \nel primer ciclo');
gettext('Si la máquina está  \napagada, las señales  \nde ejecución no pueden  \nsalir!');
gettext('Retrasar la señal un ciclo  \nmientras que se detecta si  \nla máquina ha finalizado o no');
gettext('Para automático de la  \nmáquina cuando ha terminado  ');
gettext('Paro externo');
gettext('**Tic de apagado**');
gettext('**Tic de encendido**');
gettext('**Inicializar**');
gettext('**Estado de la máquina**');
gettext('## Rising edge detector\n\nIt generates a 1-period pulse (tic) when a rising edge is detected on the  \ninput signal');
gettext('Current signal  \nstate');
gettext('Signal state in the previous  \nclock cycle');
gettext('If the current signal is 1 and its value in  \nthe previous clock cycle was 0, it means  \nthat a rising edge has been detected!  \nThe output es 1\n\nIn any other case the output is 0');
gettext('**Delay**: 0 clock cycles \n\nThere is no delay between the arrival of a rising edge  \nand its detection');
gettext('## Falling edge detector\n\nIt generates a 1-period pulse (tic) when a falling edge is detected on the  \ninput signal');
gettext('If the current signal is 0 and its value in  \nthe previous clock cycle was 1, it means  \nthat a falling edge has been detected!  \nThe output es 1\n\nIn any other case the output is 0');
gettext('**Delay**: 0 clock cycles \n\nThere is no delay between the arrival of a falling edge  \nand its detection');
gettext('Heart-ms');
gettext('Corazón de bombeo de tics a con periodo paramétrico de milisegundos');
gettext('Heart-tics-ena');
gettext('Corazón de bombeo de tics, cuyo periodo está especificado en tics también');
gettext('Heart-tics-num');
gettext('Corazón  finito de tics. Emitir num tics cuando se recibe un tic de start');
gettext('Contador módulo M, ascendente, de 5 bits, con reset ');
gettext('**Parámetro**: Módulo del contador');
gettext('Heart-tics');
gettext('Heart-us-ena');
gettext('Corazón de bombeo de tics, cuyo periodo está especificado en micro-segundos. Solo se hace el bombeo cuando está habilitado');
gettext('Heart-us');
gettext('Corazón de bombeo de tics a con periodo paramétrico de microsegundos');
gettext('heart-N-tics');
gettext('Emits a train of N unitary pulses (tics) when started. A tic is outputed at done when finished');
gettext('Contador módulo M, ascendente, de 8 bits, con reset ');
gettext('**State Flip-flop**  \n0: Idle  \n1: Working...');
gettext('**System clock**');
gettext('The busy output is the  \nstate flip-flop');
gettext('This machine ends when the  \nstate flip-flops goes from  \n1 to 0');
gettext('**Parameter**: Number of  \ntics to emit');
gettext('Generate a train of \"tics\"  when  \nthe machine is on');
gettext('Count the number of  \ntics generated');
gettext('The number of tics requested   \nhave been produced');
gettext('Stop generating  \ntics right now');
gettext('Turn off the machine');
gettext('**Output**  ');
gettext('TESTs');
gettext('00-Index');
gettext('# Index: Iceheart collection');
gettext('## Sysclk_div');
gettext('01-comparison-led');
gettext('Constant bit 1');
gettext('Heart-Sys-zero');
gettext('Sysclk_div');
gettext('32-bits');
gettext('Alhambra-II');
gettext('01-Manual-testing');
gettext('01-Manual-testing');
gettext('Sysclk_div16');
gettext('Sysclk_div2');
gettext('Sysclk_div3');
gettext('Sysclk_div32');
gettext('Sysclk_div4');
gettext('Sysclk_div5');
gettext('Sysclk_div64');
gettext('Sysclk_div8');
gettext('Sysclk_divN');
gettext('Sysclk_divN_var');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('02-icerok-test');
gettext('1 channel icerok probe adaptor');
gettext('Agregador de un bus de 7 bits y un cable a bus de 8-bits');
gettext('Valor constante 0, de 7 bits');
gettext('Valor genérico constante, de 7 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('Button-tic: Configurable button that emits a tic when it is pressed');
gettext('Configurable button (pull-up on/off. Not on/off)');
gettext('FPGA internal pull-up configuration on the input port');
gettext('Select positive or negative logic for the input (0=positive, 1=negative)');
gettext('Valor genérico constante, de 1 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('Remove the rebound on a mechanical switch');
gettext('Edges detector. It generates a 1-period pulse (tic) when either a rising edge or a falling edge is detected on the input. Block implementation');
gettext('DFF. D Flip-flop. Verilog implementation');
gettext('Sync-x01: 1-bit input with the system clock domain (Verilog implementation)');
gettext('16KB memory download machine');
gettext('Serial transmiter for the stdout bus, with sysclk parameter');
gettext('stdout bus splitter into data and tic signals');
gettext('Convert the 1-bit next signal into a 10-bit stdout bus');
gettext('Serial transmitter with system clock freq parameter');
gettext('16KB memory. Bus interface');
gettext('16KiB Bytes Synchronous memory');
gettext('Split a 16KB memory bus into its fields');
gettext('Join the fields into one 16KB memory bus');
gettext('14bits constant value: 0');
gettext('Generic: 14-bits generic constant');
gettext('16KB memory sample machine. Captura the input data and store it in the memory');
gettext('Un bit constante a 1');
gettext('08-Reg: 8 bits Register. Verilog implementation');
gettext('Máquina de contar, de 14 bits');
gettext('14-Reg-rst: 14 bits Register with reset. Verilog implementation');
gettext('AdderK-14bit: Adder of 14-bit operand and 14-bit constant');
gettext('Comp2-14bit: Comparator of two 14-bit numbers');
gettext('Generic: 14-bits k-1 constant (Input values: 1,2,...,). It returns the value input by the user minus 1. Outputs: 0,1,2,...,4095');
gettext('2-to-1 Multplexer (24-bit channels). Verilog implementation');
gettext('Un bit constante a 0');
gettext('Valor constante 0 para bus de 8 bits');
gettext('Valor genérico constante, de 8 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('8bits constant value: 0');
gettext('Transmit one character to the STDOUT bus');
gettext('Extract the next signal from the stdout bus');
gettext('stdout bus joiner (data + tic)');
gettext('2-to-1 Multplexer (10-bit channels). Verilog implementation');
gettext('2-to-1 Multplexer (8-bit channels). Verilog implementation');
gettext('Button state signal');
gettext('Tic: button pressed');
gettext('Rising edge detector');
gettext('Pull up on/off');
gettext('Not on/off');
gettext('Internal pull-up  \n* 0: OFF\n* 1: ON');
gettext('Synchronization stage');
gettext('Normalization stage\n\n* 0: Wire\n* 1: signal inverted');
gettext('Debouncing stage');
gettext('### Pull-up parameter:\n\n0: No pull-up  \n1: Pull-up activated');
gettext('Only an FPGA pin can  \nbe connected here!!!');
gettext('The pull-up is connected  \nby default');
gettext('When k=0, it works like a wire  \n(The output is equal to the input)  \nWhen k=1, it act as a not gate\n(The output is the inverse of the input)');
gettext('### Truth table for XOR\n\n| k | input | output | function |\n|---|-------|--------|----------|\n| 0 | 0     |  0     | wire     |\n| 0 | 1     |  1     | wire     |\n| 1 | 0     |  1     | Not      |\n| 1 | 1     |  0     | Not      |');
gettext('Edge detector');
gettext('Whenever there is a change in  \nthe input, the counter is started');
gettext('If the counter reaches it maximum  \nvalue, the input is considered stable  \nand it is captured');
gettext('### Time calculation\n\nFor CLK=12MHZ, a 16-bit counter reaches its  \nmaximum every 2 ** 16 * 1/F = 5.5ms aprox  \nIF more time is needed for debouncing,  \nuse a counter with more bits (17, 18...)');
gettext('## Debouncer  \n\nA value is considered stable when  \nthere is no changes during 5.5ms  \naprox. When a value is stable it is  \ncaptured on the output flip-flop');
gettext('Stable output');
gettext('Counter');
gettext('## Edges detector\n\nIt generates a 1-period pulse (tic) when an edge (Rising or falling) is detected on the  \ninput signal');
gettext('The output is 1 if the current value is 1 and the  \nprevious 0, or if the current value is 0 and the  \nprevious 1\n');
gettext('In any other case the output is 0');
gettext('## Icerok-probe machine\n\nMachine for capturing data, storing it in the memory and transmit  \nto the computer by serial port');
gettext('Writing the data to the memory on  \nevery system clock cycle');
gettext('Transmiting the raw memory contents  \nto the computer, by serial port');
gettext('When the sampling is done  \ntransmit the information to  \nthe computer');
gettext('Memory were the data  \nis stored');
gettext('## STDOUT serial\n\nSerial transmitter for the STDOUT bus\n');
gettext('**STDOUT Bus**  \n* Data to transmit (8 bits)  \n* tic (1 bit)\n* data sent (done tic, 1 bit)');
gettext('Reading data from memory  \nReading bus status');
gettext('Calculate if the bus can be taken');
gettext('The bus is available');
gettext('This circuits wants  \nto use the bus');
gettext('The bus has been already  \ntaken');
gettext('One cycle after the machine is done  \nthe bus is already taken to write  \nthe bbusy signal to 0 and allow  \nother circuits to use it');
gettext('The output bus is controlled  \nby this circuit (1) or  \nremain untouched (0)');
gettext('The reading machine  \ncan be started');
gettext('## Sample machine\n\nRead the input data, (one byte per clock cycle) and store it into the memory\n\n');
gettext('Valor  \nincrementado');
gettext('Número de ciclos  \na contar');
gettext('¿Estamos en el  \nciclo k-1?');
gettext('Si es el ciclo k-1 y  \nse pide un ciclo  \nnuevo: Terminar');
gettext('Inputs: 1,2,...');
gettext('Reading machine');
gettext('## Download machine\n\nTransmit all the memory contents through the serial port  \nThe bytes are transmited raw (in binary). No ascii encoding  \nThere should be a program running on the computer capable of  \nreading these raw bytes');
gettext('## PUTC: Transmit one character (STDOUT bus)\n\nWhen **idle**, the STDOUT bus crosses the component without modification    \n\nWhen the machine starts, the char is outputed and the state is changed to busy  \nWhen the transmitter is done (tic received in next)  the machine is turned off');
gettext('Start tic: The byte from the  \ninput char is transmited');
gettext('Char to be transmited');
gettext('State of the machine:  \n1: ON: transmitting  \n2: OFF: transparent mode  ');
gettext('If the machine is on  \nand the character has been  \ntransmitted: Turn it off');
gettext('The machine has finished');
gettext('**STDOUT BUS**');
gettext('**Create the bus**  \nfrom the data and tic signals');
gettext('Transparent mode...  \nor not');
gettext('01-manual-testing');
gettext('02-icerok-test');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('01-manual-testing');
gettext('03-bits');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('01-manual-testing');
gettext('02-bits');
gettext('03-bits');
gettext('04-bits');
gettext('05-bits');
gettext('06-bits');
gettext('07-bits');
gettext('08-bits');
gettext('12-bits');
gettext('16-bits');
gettext('20-bits');
gettext('24-bits');
gettext('28-bits');
gettext('32-bits');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('Input Values: 2,3,4');
gettext('02-icerok-led-testing');
gettext('Ledoscope-sys. Capture the input signal during the 8 cycles after the start signal is active');
gettext('08-SR: 8 bits shift right register. Verilog implementation');
gettext('Counter-x03: 3-bits counter');
gettext('03-Reg: 3 bits Register. Verilog implementation');
gettext('## Sysclk_divN 2 bits: Testing with icerok leds\n\nThe output signal is captured and displayed on the LEDs');
gettext('Sample number:  \n* 0: First sample  \n* 1: second sample\n* ...');
gettext('the start signal only enters  \nwhen the Ledoscope is off. It is  \nnot allowed to enter when it is on');
gettext('LEDoscope state:  \n* 0: Not capturing\n* 1: Capturing data');
gettext('4-bits shift register');
gettext('Buffer for capturing the  \nfour samples');
gettext('After 4 cycles the Flip-Flop is  \nreset and it stops capturing  \nbits');
gettext('As the 2-bits system counter is counting  \nall the time, the done signal is only  \ngenerated when the counter reaches the maximum  \nvalue and the Ledoscope is on (busy)');
gettext('while 1, the shift register  \nis capturing');
gettext('The input channel is captured  \non the register. One bit per  \nsystem clock');
gettext('01-manual-testing');
gettext('02-icerok-led-testing');
gettext('Alhambra-II');
gettext('02-icerok-led-testing');
gettext('Input Values: 2,3,4,...,8');
gettext('## Sysclk_divN 3 bits: Testing with icerok leds\n\nThe output signal is captured and displayed on the LEDs');
gettext('02-icerok-led-testing');
gettext('Alhambra-II');
gettext('02-icerok-led-testing');
gettext('2 channel icerok probe adaptor');
gettext('Agregador de 2 buses de 6 y 2-bits a bus de 8-bits');
gettext('Valor constante 0, de 6 bits');
gettext('Valor genérico constante, de 6 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('Agregador de 2 cables en un bus de 2-bits');
gettext('RS-FF-reset. RS Flip-flop with priority reset. Verilog implementation');
gettext('Input Values: 2,3,4,...,16');
gettext('## Sysclk_divN 4 bits: Testing with icerok\n\n');
gettext('02-icerok-led-testing');
gettext('Alhambra-II');
gettext('02-icerok-led-testing');
gettext('Input Values: 2,3,4,...,32');
gettext('## Sysclk_divN 5 bits: Testing with icerok\n\n');
gettext('02-icerok-led-testing');
gettext('Alhambra-II');
gettext('02-icerok-led-testing');
gettext('Input Values: 2,3,4,...,64');
gettext('## Sysclk_divN 6 bits: Testing with icerok\n\n');
gettext('02-icerok-led-testing');
gettext('Alhambra-II');
gettext('02-icerok-led-testing');
gettext('Input Values: 2,3,4,...,128');
gettext('## Sysclk_divN 7 bits: Testing with icerok\n\n');
gettext('02-icerok-led-testing');
gettext('Alhambra-II');
gettext('02-icerok-led-testing');
gettext('Input Values: 2,3,4,...,256');
gettext('## Sysclk_divN 8 bits: Testing with icerok\n\n');
gettext('02-icerok-led-testing');
gettext('Alhambra-II');
gettext('02-icerok-led-testing');
gettext('Input Values: 2,3,4,...,4096');
gettext('## Sysclk_divN 12 bits: Testing with icerok\n\n');
gettext('02-icerok-led-testing');
gettext('Alhambra-II');
gettext('02-icerok-led-testing');
gettext('Input Values: 2,3,4,...,65536');
gettext('## Sysclk_divN 16 bits: Testing with icerok\n\n');
gettext('02-icerok-led-testing');
gettext('Alhambra-II');
gettext('02-icerok-led-testing');
gettext('Input Values: 2,3,4,...,1048576');
gettext('## Sysclk_divN 20 bits: Testing with icerok\n\n');
gettext('02-icerok-led-testing');
gettext('Alhambra-II');
gettext('02-icerok-led-testing');
gettext('Input Values: 2,3,4,...,16777216');
gettext('## Sysclk_divN 24 bits: Testing with icerok\n\n');
gettext('Frec: 1Hz  \n(if the sysclk is 12Mhz)');
gettext('02-icerok-led-testing');
gettext('Alhambra-II');
gettext('02-icerok-led-testing');
gettext('Input Values: 2,3,4,...,268435456');
gettext('## Sysclk_divN 28 bits: Testing with icerok\n\n');
gettext('02-icerok-led-testing');
gettext('Alhambra-II');
gettext('02-icerok-led-testing');
gettext('Input Values: 2,3,4,...,4294967296');
gettext('## Sysclk_divN 32 bits: Testing with icerok\n\n');
gettext('02-icerok-led-testing');
gettext('02-bits');
gettext('01-manual-testing');
gettext('Counter-x02: 2-bits counter');
gettext('02-Reg: 2 bits Register. Verilog implementation');
gettext('01-manual-testing');
gettext('00-Index');
gettext('01-comparison-led');
